services:
  mysql:
    container_name: mysql-db
    hostname: mysql-db
    image: mysql:8.0
    restart: always
    tty: true
    command: --default-authentication-plugin=mysql_native_password
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: true
      MYSQL_ROOT_HOST: "%"
    ports:
      - "${DB_PORT_MYSQL}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - container-stack-network
    # network_mode: host # Enable this with you want access like host mode.

  postgres:
    container_name: postgres-db
    hostname: postgres-db
    image: postgres:13-alpine
    restart: always
    tty: true
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT_POSTGRES}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - container-stack-network

  mssqlserver:
    container_name: mssqlserver-db
    image: mcr.microsoft.com/mssql/server:2017-latest
    restart: always
    tty: true
    # platform: linux/x86_64
    env_file:
      - .env
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DB_PORT_SQLSERVER}:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - container-stack-network

  mongodb:
    container_name: mongodb-db
    hostname: mongodb-db
    image: mongo:latest
    restart: always
    tty: true
    env_file:
      - .env
    environment:
      MONGO_INITDB_DATABASE: ${DB_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT_MONGODB}:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - container-stack-network

  redis:
    container_name: redis-db
    hostname: redis-db
    image: redis:alpine
    restart: always
    tty: true
    env_file:
      - .env
    ports:
      - "${DB_PORT_REDIS}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 20 1 --loglevel warning --requirepass ${DB_PASSWORD}
    networks:
      - container-stack-network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    tty: true
    env_file:
      - .env
    environment:
      REDIS_HOSTS: local:redis-db:${DB_PORT_REDIS}
      REDIS_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"
    depends_on:
      - redis
    networks:
      - container-stack-network

volumes:
  mysql_data:
    driver: local
  postgres_data:
    driver: local
  sqlserver_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  container-stack-network:
    external: true
    name: container-stack-network
